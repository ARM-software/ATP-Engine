# SPDX-License-Identifier: BSD-3-Clause-Clear
#
# Copyright (c) 2012 ARM Limited
# All rights reserved.
# Authors: Matteo Andreozzi

from m5.params import *
from m5.proxy import *
from m5.util.pybind import PyBindMethod
from m5.SimObject import SimObject

#ATP GEM5 adaptor SimObject

class ProfileGen(SimObject):
    type = 'ProfileGen'
    cxx_header = "gem5/profile_gen.hh"
    cxx_exports = [ PyBindMethod('initStream') ]

    # Vector Port used for sending ATP requests and receiving responses
    port = VectorMasterPort("Vector of ATP Masters ports")

    # System used to determine the mode of the memory system
    system = Param.System(Parent.any, "System this generator is part of")

    #AMBA traffic protocol file
    config_files = VectorParam.String("ATP configuration files")
    # flag to enable ATP exit the simulation when all profiles have depleted their packets
    exit_when_done = Param.Bool(True, "Exit the simulation when all profiles have depleted their packets")

    # flag to enable ATP exit the simulation when at least one master depletes its packets
    exit_when_one_master_ends = Param.Bool(False, "Exit the simulation when at least one master terminates")

    # flag to enable tracing the generated time/addresses pattern and relative file name
    trace_atp       = Param.Bool(False, "Enables the tracing of ATP generated packets in time")

    trace_gem       = Param.Bool(False, "Enables the tracing of GEM5 generated packets in time")
    trace_gem_file  = Param.String("gem5.trace", "File where to trace GEM5 generated packets in time")

    trace_m3i       = Param.Bool(False, "Enables the tracing of ATP masters in M3I format")
    trace_m3i_bus   = Param.Int(16, "BUS width in bytes used to generate the ATP master M3I traces")

    # flag to enable/disable error on suppressed out-of-range addresses
    out_of_range_addresses = Param.Bool(False, "Allows out of range addresses to be generated by ATP Engine")
    # flag to enable/disable debug mode to create one master per configured profile
    profiles_as_masters = Param.Bool(False, "Enables the creation of one master per configured profile (debug mode)")
    # flag to enable/disable ATP tracker latency
    tracker_latency = Param.Bool(False, "Enables the ATP tracker latency")
    core_engine_debug = Param.Bool(False, "Enables ATP Engine debug mode")
    init_only = Param.Bool(False, "Initialises ATP Engine but does not trigger an update immediately after")
    disable_watchdog = Param.Bool(False, "Disables ProfileGen watchdog")
    disable_mem_check = Param.Bool(False, "Disables check for ATP Engine valid physical memory addresses")

    def __init__(self, **kwargs):
        super(ProfileGen, self).__init__(**kwargs)
        self._streams = []

    def initStream(self, master, rootp, rbase=MaxAddr, rrange=MaxAddr,
                   wbase=MaxAddr, wrange=MaxAddr, task_id=1024):
        self._streams.append((master, rootp, rbase, rrange,
                              wbase, wrange, task_id))

    def init(self):
        self.getCCObject().init()
        for stream in self._streams:
            self.getCCObject().initStream(*stream)
